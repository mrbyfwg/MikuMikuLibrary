<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="configText" xml:space="preserve">
    <value>#将数个模组替换mod合并为一个mod, 并添加模型槽位
#Merge several module replacement mods into one mod and add model slots

#!!!!!所有路径大小写敏感!!!!!
#!!!!!All paths are case sensitive!!!!!
               
#以下五个文件的选择优先级
#1,有带mdata_*前缀的优先选择, 选择靠后的M***\rom文件夹中的mdata_*
#2,没有带mdata_*前缀的, 选择靠后M***\rom文件夹中不带前缀的
#3,都没有, 选择游戏基础rom文件夹中的
#Selection priority of the following five files
#1, preferentially select files with the prefix of mdata_*, preferentially select the files of mdata_* in the lower M***\rom folder
#2, there is no the mdata_* prefix, select the unprefixed files in the lower M***\rom folder
#3, Finally, select the unprefixed file in the game's basic rom folder
gm_module_tbl = C:\PDAFT\MDATA\MPF2\rom\mdata_gm_module_tbl.farc 
gm_customize_item_tbl = C:\PDAFT\rom\gm_customize_item_tbl.farc
chritm_prop = C:\PDAFT\MDATA\MPF2\rom\mdata_chritm_prop.farc
obj_db = C:\PDAFT\MDATA\MPF2\rom\objset\mdata_obj_db.bin
spr_db = C:\PDAFT\MDATA\MPF2\rom\2d\mdata_spr_db.bin
#输出文件夹, 会在此路径自动下生成MZZZ, 保证此路径下没有MZZZ
#Output folder, MZZZ will be automatically generated under this path, ensure that there is no MZZZ under this path
outputFolder = C:\PDAFT\MDATA
#你想要合并的模组替换mod, 只需要保证每个单独的mod都是可用的, 允许多个mod之间存在冲突
#Mods you want to merge, only need to ensure that each individual mod is available, allowing conflicts between multiple mods
modsPathList = C:\PDAFT\MDATAS\MSNB
modsPathList = C:\PDAFT\MDATAS\M401
modsPathList = C:\PDAFT\MDATAS\Mkai
modsPathList = C:\PDAFT\MDATAS\Mkim
modsPathList = C:\PDAFT\MDATAS\MnFT
modsPathList = C:\PDAFT\MDATAS\MnFT1
modsPathList = C:\PDAFT\MDATAS\M400
#基础游戏路径, diva.exe所在路径
#Base game path, the path where diva.exe is located
baseGamePath = C:\PDAFT
#官方Mdata相对路径, info.txt所在路径
#Official Mdata relative path, path where info.txt is located
officialMdataPathList = \MDATA\m215
officialMdataPathList = \MDATA\m220
officialMdataPathList = \MDATA\m230
officialMdataPathList = \MDATA\m240
officialMdataPathList = \MDATA\m250
officialMdataPathList = \MDATA\m260
officialMdataPathList = \MDATA\m270</value>
  </data>
</root>